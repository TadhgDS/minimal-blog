{"title":"2HERE2 BE A POST OF EPIC PROPORTIONS","mainText":"Home\r\nGetting started\r\nGuide\r\nAPI reference\r\nAdvanced topics\r\nResources\r\nExpress and Node.js Training from StrongLoop\r\nBasic routing tutorial\r\n\r\nThis tutorial is a basic introduction to routing with Express. Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).\r\n\r\nEach route can have one or more handler functions, which is / are executed when the route is matched.\r\n\r\nRoute definition takes the following structure app.METHOD(PATH, HANDLER), where app is an instance of express, METHOD is an HTTP request method, PATH is a path on the server, and HANDLER is the function executed when the route is matched.\r\n\r\nThis tutorial assumes that an instance of express named app is created and the server is running. If you are not familiar with creating an app and starting it, refer to the Hello world example.\r\nThe following code illustrates some example routes in an app.\r\n\r\n// respond with \"Hello World!\" on the homepage\r\napp.get('/', function (req, res) {\r\n  res.send('Hello World!');\r\n})\r\n\r\n// accept POST request on the homepage\r\napp.post('/', function (req, res) {\r\n  res.send('Got a POST request');\r\n})\r\n\r\n// accept PUT request at /user\r\napp.put('/user', function (req, res) {\r\n  res.send('Got a PUT request at /user');\r\n})\r\n\r\n// accept DELETE request at /user\r\napp.delete('/user', function (req, res) {\r\n  res.send('Got a DELETE request at /user');\r\n})\r\nFor more details about routing, refer the routing guide.\r\n\r\n\r\nThe Express project is sponsored by StrongLoop.Edit this page on ","submitDate":1423988969206,"editDate":"","graphs":""}